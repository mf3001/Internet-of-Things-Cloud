
Poky (Yocto Project Reference Distro) 1.7.2 edison ttyMFD2

edison login: root
Password: 
-sh: sudo: command not found
root@edison:~# id fconfig
lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

usb0      Link encap:Ethernet  HWaddr 02:00:86:e8:57:d5  
          inet addr:192.168.2.15  Bcast:192.168.2.255  Mask:255.255.255.0
          UP BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

wlan0     Link encap:Ethernet  HWaddr fc:c2:de:3b:52:30  
          inet addr:160.39.242.101  Bcast:160.39.243.255  Mask:255.255.254.0
          inet6 addr: fe80::fec2:deff:fe3b:5230/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:85 errors:0 dropped:0 overruns:0 frame:0
          TX packets:146 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:9667 (9.4 KiB)  TX bytes:22307 (21.7 KiB)

root@edison:~# d ls
IOT                              mtaUpdates.py
bluez-5.24                       parse-embedded-sdks-1.0.0
bluez-5.24.tar.xz                parse-embedded-sdks-1.0.0.zip
dynamodata.py                    parse-embedded-sdks-1.0.0.zip.1
e6765_spring16                   protoc
root@edison:~# cd IOT/
root@edison:~/IOT# ls
IOT
root@edison:~/IOT# cd IOT/
root@edison:~/IOT/IOT# ls
Lab1  Lab2  Lab3  Lab4  Lab5  Lab6
root@edison:~/IOT/IOT# cd l Lab5
root@edison:~/IOT/IOT/Lab5# ls
Lab5   utils
root@edison:~/IOT/IOT/Lab5# cd Lab5/
root@edison:~/IOT/IOT/Lab5/Lab5# ls
IOT_Lab5.csv             finalData.csv            pushToKinesis.py
Readme.md                gatherData.py            rawDataChange.py
S3.py                    index.js.template        rawDataNew.csv
buildTrainingDataSet.py  kinesis_feed.csv
createAMLModel.py        push.py
root@edison:~/IOT/IOT/Lab5/Lab5# python pusht ToKinesis.py kinesis_feed.csv 
root@edison:~/IOT/IOT/Lab5/Lab5# python pushToKinesis.py kinesis_feed.csv 
root@edison:~/IOT/IOT/Lab5/Lab5# nano kinesis_feed.csv                  pushToKinesis.py 
)07[?47h[1;24r[m[4l[?1h=[?1h=[?1h=[m[m[m[H[2J[7m  GNU nano 2.2.5            File: pushToKinesis.py                              [4;1H[m# This program sends the data to kinesis. You do not need to modify this code e$[5;1H# Usage python pushToKinesis.py <file name>[1B# a lambda function will be triggered as a result, that will send it to AWS ML $[7;1H# Usage python pushToKinesis.py <csv file name with extension>[1Bimport urllib2,contextlib[1Bimport google.protobuf[1Bimport sys,csv,json[2Bimport boto3[2Bsys.path.append('../utils')[1Bimport aws[1Bimport mtaUpdates[1Bfrom pytz import timezone[1Bfrom datetime import datetime[1Bimport gtfs_realtime_pb2[2BKINESIS_STREAM_NAME = 'IOT5'[22;32H[7m[ Read 88 lines ][1B^G[m Get Help  [7m^O[m WriteOut  [7m^R[m Read File [7m^Y[m Prev Page [7m^K[m Cut Text  [7m^C[m Cur Pos[1B[7m^X[m Exit[6C[7m^J[m Justify   [7m^W[m Where Is  [7m^V[m Next Page [7m^U[m UnCut Text[7m^T[m To Spell[21A[1B[1B[1B[1B[1B[2B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[2;21r[2;1H[10M[1;24r[2;1H[K[12Bdef main(fileName):[16;5H# connect to kinesis[17;5Hwith open('../utils/key.txt', 'rb') as keyfile:[18;9HAPIKEY = keyfile.read().rstrip('\n')[19;9Hkeyfile.close()[20;9Hfeedurl = 'http://datamine.mta.info/mta_esi.php?feed_id=1&key='[21;9Hfeedurl = feedurl + APIKEY[9A[1B[2B[1B[1B[1B[22;32H[K[3A[1B[1B[2;22r[2;1H[10M[1;24r[15;9Hfeed = gtfs_realtime_pb2.FeedMessage()[16;9Htry:[1Bwith contextlib.closing(urllib2.urlopen(feedurl)) as response:[18;17Hd = feed.ParseFromString(response.read())[19;9Hexcept (urllib2.URLError, google.protobuf.message.DecodeError) as e:[20;13Hprint "Error while connecting to mta server " +str(e)[21;9Hrow=[][9A[1B[1B[1B[2B[1B[1B[1B[1B[2;22r[2;1H[10M[1;24r[12;9Hnearest = 0[13;9H#nearest_tripId =''[14;9Hfor entity in feed.entity:[15;13Hif entity.vehicle and entity.vehicle.trip.trip_id and entity.vehicl$[16;17HvehicleData = entity.vehicle[17;17HtripId = vehicleData.trip.trip_id[18;17HstopId = vehicleData.stop_id[19;17Hif (tripId[7] == '1') and (stopId[3] == 'S') and (int(str(stopI$[20;21Hnearest = int(stopId[0:3])[21;21Hnearest_tripId = tripId[9A[1B[1B[1B[1B[1B[2B[1B[1B[2;22r[2;1H[10M[1;24r[2;9H[K[12;21Hpush = int(str(nearest_tripId)[0:6])/100[13;9Hrow.append(push)[14;9Hrow.append(datetime.today().weekday())[15;9Hhead = ['startTime','day'][16;9Hwith open(fileName, 'w') as csvfile:[17;13Hspamwriter = csv.writer(csvfile, delimiter=',', quotechar='|', quot$[18;13Hspamwriter.writerow(head)[19;13Hspamwriter.writerow(row)[7A[1B[1B[1B[1B[1B[2B[1B[1B[A[2A[A[A[A[A[2A[A[12B[J[24;80H[24;1H[2J[?47l8[?1l>root@edison:~/IOT/IOT/Lab5/Lab5# s
-sh: s: command not found
root@edison:~/IOT/IOT/Lab5/Lab5# ls
IOT_Lab5.csv             finalData.csv            pushToKinesis.py
Readme.md                gatherData.py            rawDataChange.py
S3.py                    index.js.template        rawDataNew.csv
buildTrainingDataSet.py  kinesis_feed.csv
createAMLModel.py        push.py
root@edison:~/IOT/IOT/Lab5/Lab5# nano buildTrainingDataSet.py 
)07[?47h[1;24r[m[4l[?1h=[?1h=[?1h=[m[m[m[H[2J[7m  GNU nano 2.2.5         File: buildTrainingDataSet.py                          [3;1H[m## This program is used to clean out the data from the csv that you collected.[1B## It aims at removing duplicate entries and extracting any further insights[1B## that the author(s) of the code may see fit[2B## Usage (for file as is currently): python buildTrainingDataSet.py <filename o$[9;1Himport sys[1Bimport csv[1B# Pandas is a python library used for data analysis[1Bimport pandas as pd[1Bfrom pandas import read_csv[1Bfrom pytz import timezone[1Bfrom datetime import datetime[3BTIMEZONE = timezone('America/New_York')[3Bdef main(fileHandle):[22;32H[7m[ Read 76 lines ][1B^G[m Get Help  [7m^O[m WriteOut  [7m^R[m Read File [7m^Y[m Prev Page [7m^K[m Cut Text  [7m^C[m Cur Pos[1B[7m^X[m Exit[6C[7m^J[m Justify   [7m^W[m Where Is  [7m^V[m Next Page [7m^U[m UnCut Text[7m^T[m To Spell[21A[1B[1B[2B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[2B[3;21r[3;1H[10M[1;24r[12;9H# This creates a dataframe[13;9HrawData = read_csv(fileHandle)[14;9H# Remove duplicate entries based on tripId, retain the one with maximum$[15;9Hdata = rawData.groupby('tripId').apply(lambda x: x.ix[x.timestamp.idxma$[16;9H# Drop the nan values for 42 and 96[17;9Hdata = data.dropna()[18;9H# Seperate all the local trains and form a new data frame[19;9HlocalTrains = data[data.route == 'L'][20;9H# Express trains[21;9HexpressTrains = data[data.route == 'E'][8A[2B[2B[22;32H[K[3A[2B[3;22r[3;1H[10M[1;24r[12;9H# 1. Find the time difference (to reach 96th) between all combinations $[13;9H# 2. Consider only positive delta[14;9H# 3. Make the final table[15;9H#['timestamp','tripId','route','day','timeToReachSource(116)','timeToRe$[16;9H#'timeToReachDestination(42)', 'ifReal1', 'ifReal2', 'ifReal3'][17;9H# Create a new data frame for final table[18;9Hcol_list = ['tripId','starttime','day','level','time1at96','travelTimeL$[19;9HfinalData = pd.DataFrame([],columns=col_list)[21;9Hfor index,train_local in localTrains.iterrows():[8A[2B[4B[2B[3;22r[3;1H[10M[1;24r[12;17Htime1at96 = train_local['timeToReachExpressStation'][13;17Htime1at42 = train_local['timeToReachDestination'][14;17Hstarttime = int(train_local['tripId'][:6])/100[15;17HtravelTimeLocal = time1at42 - time1at96[16;17Hlevel = int(train_local['ifReal2']) + int(train_local['ifReal3'$[17;17H#print int(localTrains.ifReal1)+int(localTrains.ifReal2)+int(lo$[18;17Hfor index,train_express in expressTrains.iterrows():[19;25Hif train_express['timeToReachExpressStation'] > time1at$[20;33HtravelTimeExpress = train_express['timeToReachD$[21;33Hif travelTimeExpress < travelTimeLocal:[8A[1B[1B[1B[1B[1B[1B[1B[1B[3;22r[3;1H[10M[1;24r[12;41Hswitch = 1[13;33Helse:[1B	switch = 0[15;33Hcol = [train_local.tripId,starttime,train_local$[16;33Htemp_data = pd.DataFrame([col],columns=col_list)[17;33HfinalData = finalData.append(temp_data)[18;33H#finalData.to_csv("finalData.csv",index=False)[19;33Hbreak[20;9HfinalData.to_csv("finalData4.csv",index=False)[7A[1B[1B[2B[1B[1B[1B[1B[2;22r[2;1H[10M[1;24r[2;41H[K[12Bif __name__ == "__main__":[16;9HlengthArg = len(sys.argv)[19;9Hif lengthArg < 2:[20;17Hprint "Missing arguments"[21;17Hsys.exit(-1)[9A[1B[1B[2B[1B[A[A[A[3A[3A[4A[2;22r[2;1H[10L[1;24r[3;17Htime1at42 = train_local['timeToReachDestination'][4;17Hstarttime = int(train_local['tripId'][:6])/100[5;17HtravelTimeLocal = time1at42 - time1at96[6;17Hlevel = int(train_local['ifReal2']) + int(train_local['ifReal3'$[7;17H#print int(localTrains.ifReal1)+int(localTrains.ifReal2)+int(lo$[8;17Hfor index,train_express in expressTrains.iterrows():[9;25Hif train_express['timeToReachExpressStation'] > time1at$[10;33HtravelTimeExpress = train_express['timeToReachD$[11;33Hif travelTimeExpress < travelTimeLocal:[12;41Hswitch = 1[2A[4A[2;21r[2;1H[10L[1;24r[3;9H# 2. Consider only positive delta[4;9H# 3. Make the final table[5;9H#['timestamp','tripId','route','day','timeToReachSource(116)','timeToRe$[6;9H#'timeToReachDestination(42)', 'ifReal1', 'ifReal2', 'ifReal3'][7;9H# Create a new data frame for final table[8;9Hcol_list = ['tripId','starttime','day','level','time1at96','travelTimeL$[9;9HfinalData = pd.DataFrame([],columns=col_list)[11;9Hfor index,train_local in localTrains.iterrows():[12;17Htime1at96 = train_local['timeToReachExpressStation'][8A[2;21r[2;1H[10L[1;24r[3;9HrawData = read_csv(fileHandle)[4;9H# Remove duplicate entries based on tripId, retain the one with maximum$[5;9Hdata = rawData.groupby('tripId').apply(lambda x: x.ix[x.timestamp.idxma$[6;9H# Drop the nan values for 42 and 96[7;9Hdata = data.dropna()[8;9H# Seperate all the local trains and form a new data frame[9;9HlocalTrains = data[data.route == 'L'][10;9H# Express trains[11;9HexpressTrains = data[data.route == 'E'][12;9H# 1. Find the time difference (to reach 96th) between all combinations $[10;1H[4A[2;21r[2;1H[10L[1;24r[3;1Hfrom pandas import read_csv[1Bfrom pytz import timezone[1Bfrom datetime import datetime[3BTIMEZONE = timezone('America/New_York')[3Bdef main(fileHandle):[12;9H# This creates a dataframe[3A[6A[2;21r[2;1H[10L[1;24r[3;1H## This program is used to clean out the data from the csv that you collected.[1B## It aims at removing duplicate entries and extracting any further insights[1B## that the author(s) of the code may see fit[2B## Usage (for file as is currently): python buildTrainingDataSet.py <filename o$[9;1Himport sys[1Bimport csv[1B# Pandas is a python library used for data analysis[1Bimport pandas as pd[4A[2A[2A[A[1B[1B[1B[2B[1B[1B[1B[1B[1B[2B[1B[1B[1B[1B[1B[1B[3;22r[3;1H[10M[1;24r[12;9H# This creates a dataframe[13;9HrawData = read_csv(fileHandle)[14;9H# Remove duplicate entries based on tripId, retain the one with maximum$[15;9Hdata = rawData.groupby('tripId').apply(lambda x: x.ix[x.timestamp.idxma$[16;9H# Drop the nan values for 42 and 96[17;9Hdata = data.dropna()[18;9H# Seperate all the local trains and form a new data frame[19;9HlocalTrains = data[data.route == 'L'][20;9H# Express trains[21;9HexpressTrains = data[data.route == 'E'][9A[1B[1B[1B[1B[2B[2B[1B[3;22r[3;1H[10M[1;24r[12;9H# 1. Find the time difference (to reach 96th) between all combinations $[13;9H# 2. Consider only positive delta[14;9H# 3. Make the final table[15;9H#['timestamp','tripId','route','day','timeToReachSource(116)','timeToRe$[16;9H#'timeToReachDestination(42)', 'ifReal1', 'ifReal2', 'ifReal3'][17;9H# Create a new data frame for final table[18;9Hcol_list = ['tripId','starttime','day','level','time1at96','travelTimeL$[19;9HfinalData = pd.DataFrame([],columns=col_list)[21;9Hfor index,train_local in localTrains.iterrows():[9A[1B[1B[1B[1B[1B[1B[2B[3;22r[3;1H[10M[1;24r[12;17Htime1at96 = train_local['timeToReachExpressStation'][13;17Htime1at42 = train_local['timeToReachDestination'][14;17Hstarttime = int(train_local['tripId'][:6])/100[15;17HtravelTimeLocal = time1at42 - time1at96[16;17Hlevel = int(train_local['ifReal2']) + int(train_local['ifReal3'$[17;17H#print int(localTrains.ifReal1)+int(localTrains.ifReal2)+int(lo$[18;17Hfor index,train_express in expressTrains.iterrows():[19;25Hif train_express['timeToReachExpressStation'] > time1at$[20;33HtravelTimeExpress = train_express['timeToReachD$[21;33Hif travelTimeExpress < travelTimeLocal:[9A[1B[1B[1B[1B[1B[1B[2B[3;22r[3;1H[10M[1;24r[12;41Hswitch = 1[13;33Helse:[1B	switch = 0[15;33Hcol = [train_local.tripId,starttime,train_local$[16;33Htemp_data = pd.DataFrame([col],columns=col_list)[17;33HfinalData = finalData.append(temp_data)[18;33H#finalData.to_csv("finalData.csv",index=False)[19;33Hbreak[20;9HfinalData.to_csv("finalData4.csv",index=False)[8A[1B[1B[1B[1B[1B[2B[1B[1B[2;22r[2;1H[10M[1;24r[2;41H[K[12Bif __name__ == "__main__":[16;9HlengthArg = len(sys.argv)[19;9Hif lengthArg < 2:[20;17Hprint "Missing arguments"[21;17Hsys.exit(-1)[9A[1B[1B[1B[2B[1B[5B[J[24;80H[24;1H[2J[?47l8[?1l>root@edison:~/IOT/IOT/Lab5/Lab5# ls
IOT_Lab5.csv             finalData.csv            pushToKinesis.py
Readme.md                gatherData.py            rawDataChange.py
S3.py                    index.js.template        rawDataNew.csv
buildTrainingDataSet.py  kinesis_feed.csv
createAMLModel.py        push.py
root@edison:~/IOT/IOT/Lab5/Lab5# l clear
[H[Jroot@edison:~/IOT/IOT/Lab5/Lab5# ls
IOT_Lab5.csv             finalData.csv            pushToKinesis.py
Readme.md                gatherData.py            rawDataChange.py
S3.py                    index.js.template        rawDataNew.csv
buildTrainingDataSet.py  kinesis_feed.csv
createAMLModel.py        push.py
root@edison:~/IOT/IOT/Lab5/Lab5# nano finalData.csv 
)07[?47h[1;24r[m[4l[?1h=[?1h=[?1h=[m[m[m[H[2J[7m  GNU nano 2.2.5             File: finalData.csv                                [3;1H[mtripId,starttime,day,level,time1at96,travelTimeLocal,travelTimeExpress,switch[1B074150_1..S02X021,741,6,0,1456681653,660,3165,0[1B074950_1..S02X021,749,6,0,1456682249,660,2569,0[1B075750_1..S02X021,757,6,0,1456682654,750,2164,0[1B076550_1..S02X021,765,6,0,1456683120,660,1698,0[1B078950_1..S02X021,789,6,0,1456684524,660,941,0[1B079750_1..S02X021,797,6,0,1456685117,660,915,0[1B080550_1..S02X021,805,6,0,1456685532,750,500,1[1B081350_1..S02X021,813,6,0,1456686000,660,887,0[1B082150_1..S02X021,821,6,0,1456686480,660,780,0[1B082950_1..S02X021,829,6,0,1456686960,750,1020,0[1B083750_1..S02X021,837,6,0,1456687440,660,540,1[1B084550_1..S02X021,845,6,0,1456687920,660,780,0[1B085350_1..S02X021,853,6,0,1456688400,750,1020,0[1B086150_1..S02X021,861,6,0,1456688880,660,540,1[1B086950_1..S02X021,869,6,0,1456689360,660,780,0[1B087750_1..S02X021,877,6,0,1456689840,750,1020,0[1B088550_1..S02X021,885,6,1,1456690320,974,540,1[1B089350_1..S02X021,893,6,0,1456690800,660,780,0[22;18H[7m[ Read 150 lines (Converted from Mac format) ][1B^G[m Get Help  [7m^O[m WriteOut  [7m^R[m Read File [7m^Y[m Prev Page [7m^K[m Cut Text  [7m^C[m Cur Pos[1B[7m^X[m Exit[6C[7m^J[m Justify   [7m^W[m Where Is  [7m^V[m Next Page [7m^U[m UnCut Text[7m^T[m To Spell[21A[1B[1B[1B[1B[1B[1B[1B[2B[1B[1B[1B[1B[1B[1B[1B[2B[3;21r[3;1H[10M[1;24r[12;1H090150_1..S02X021,901,6,0,1456691280,750,1020,0[1B090950_1..S02X021,909,6,0,1456691760,660,540,1[1B091750_1..S02X021,917,6,0,1456692240,660,780,0[1B092550_1..S02X021,925,6,0,1456692720,750,1020,0[1B093350_1..S02X021,933,6,0,1456693200,660,540,1[1B094150_1..S02X021,941,6,0,1456693680,660,780,0[1B094950_1..S02X021,949,6,0,1456694160,750,1020,0[1B095750_1..S02X021,957,6,0,1456694640,660,540,1[1B103000_1..S02R,1030,0,0,1457991433,690,505,1[1B103550_1..S07R,1035,0,0,1457991605,690,1078,0[9A[1B[1B[2B[1B[1B[22;18H[K[3A[1B[3;22r[3;1H[10M[1;24r[12;1H104200_1..S02R,1042,0,0,1457992212,690,471,1[1B104600_1..S02R,1046,0,0,1457992517,690,1043,0[1B105050_1..S02R,1050,0,0,1457992765,690,795,0[1B105550_1..S,1055,0,0,1457992920,690,640,1[1B105550_1..S02R,1055,0,0,1457992952,690,608,1[1B106050_1..S02R,1060,0,0,1457993220,690,592,1[1B106550_1..S02R,1065,0,0,1457993520,690,850,0[1B107050_1..S02R,1070,0,0,1457993820,690,550,1[1B107550_1..S02R,1075,0,0,1457994120,690,690,0[1B107850_1..S02R,1078,0,0,1457994420,690,840,0[9A[1B[2A[A[A[A[A[A[A[A[A[2;21r[2;1H[10L[1;24r[3;1H082950_1..S02X021,829,6,0,1456686960,750,1020,0[1B083750_1..S02X021,837,6,0,1456687440,660,540,1[1B084550_1..S02X021,845,6,0,1456687920,660,780,0[1B085350_1..S02X021,853,6,0,1456688400,750,1020,0[1B086150_1..S02X021,861,6,0,1456688880,660,540,1[1B086950_1..S02X021,869,6,0,1456689360,660,780,0[1B087750_1..S02X021,877,6,0,1456689840,750,1020,0[1B088550_1..S02X021,885,6,1,1456690320,974,540,1[1B089350_1..S02X021,893,6,0,1456690800,660,780,0[1B090150_1..S02X021,901,6,0,1456691280,750,1020,0[A[A[2A[A[1B[2B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[3;22r[3;1H[10M[1;24r[12;1H104200_1..S02R,1042,0,0,1457992212,690,471,1[1B104600_1..S02R,1046,0,0,1457992517,690,1043,0[1B105050_1..S02R,1050,0,0,1457992765,690,795,0[1B105550_1..S,1055,0,0,1457992920,690,640,1[1B105550_1..S02R,1055,0,0,1457992952,690,608,1[1B106050_1..S02R,1060,0,0,1457993220,690,592,1[1B106550_1..S02R,1065,0,0,1457993520,690,850,0[1B107050_1..S02R,1070,0,0,1457993820,690,550,1[1B107550_1..S02R,1075,0,0,1457994120,690,690,0[1B107850_1..S02R,1078,0,0,1457994420,690,840,0[8A[1B[2B[1B[1B[1B[1B[3;22r[3;1H[10M[1;24r[12;1H108550_1..S02R,1085,0,0,1457994720,690,540,1[1B109050_1..S02R,1090,0,0,1457995020,690,720,0[1B109550_1..S02R,1095,0,0,1457995320,690,900,0[1B110050_1..S02R,1100,0,0,1457995620,690,600,1[1B110550_1..S02R,1105,0,0,1457995920,690,750,0[1B130150_1..S02R,1301,2,0,1458094073,660,393,1[1B130650_1..S02R,1306,2,0,1458094370,660,801,0[1B131450_1..S02R,1314,2,0,1458094829,660,1155,0[1B132450_1..S02R,1324,2,0,1458095460,660,524,1[1B133450_1..S02R,1334,2,0,1458096060,660,534,1[8A[1B[1B[1B[1B[2B[1B[1B[3;22r[3;1H[10M[1;24r[12;1H134450_1..S02R,1344,2,0,1458096660,660,690,0[1B135450_1..S02R,1354,2,0,1458097260,660,810,0[1B000650_1..S02X018,6,2,0,1458102780,660,1260,0[1B002550_1..S02X018,25,2,0,1458103920,660,1320,0[1B004550_1..S02X018,45,2,0,1458105120,660,1320,0[1B059950_1..S02X013,599,5,0,1458398159,660,584,1[1B060750_1..S02X013,607,5,0,1458398261,660,482,1[1B061550_1..S02X013,615,5,0,1458398508,660,1071,0[1B062350_1..S02X013,623,5,0,1458399004,660,575,1[1B063150_1..S02X013,631,5,0,1458399480,660,642,1[9A[1B[1B[2B[1B[1B[1B[1B[1B[3;22r[3;1H[10M[1;24r[12;1H063950_1..S02X013,639,5,0,1458399960,660,900,0[1B064750_1..S02X013,647,5,0,1458400440,660,1140,0[1B065550_1..S02X013,655,5,0,1458400920,660,660,0[1B066350_1..S02X013,663,5,0,1458401400,660,900,0[1B067150_1..S02X013,671,5,0,1458401880,660,1140,0[1B067950_1..S02X013,679,5,0,1458402360,660,660,0[1B133450_1..S02R,1334,2,0,1458096069,660,7971,0[1B134450_1..S02R,1344,2,0,1458096532,660,7508,0[1B135450_1..S02R,1354,2,0,1458097260,660,6780,0[1B136450_1..S02R,1364,2,0,1458097860,660,6180,0[9A[1B[1B[2B[1B[1B[2B[1B[3;22r[3;1H[10M[1;24r[12;1H137450_1..S02R,1374,2,0,1458098460,660,5580,0[1B138450_1..S02R,1384,2,0,1458099060,660,4980,0[1B140650_1..S02R,1406,2,0,1458100479,660,3561,0[1B141850_1..S02R,1418,2,1,1458101193,636,2847,0[1B143250_1..S02R,1432,2,0,1458101945,660,2095,0[1B078350_1..S02X013,783,5,0,1458408675,660,654,1[1B079150_1..S02X013,791,5,0,1458409095,660,490,1[1B079950_1..S02X013,799,5,0,1458409524,660,681,0[1B080750_1..S02X013,807,5,0,1458410047,660,947,0[1B081550_1..S02X013,815,5,0,1458410520,660,474,1[9A[1B[1B[1B[1B[1B[2B[1B[1B[3;22r[3;1H[10M[1;24r[12;1H082350_1..S02X013,823,5,0,1458411000,660,660,0[1B083150_1..S02X013,831,5,0,1458411480,660,900,0[1B083950_1..S02X013,839,5,0,1458411960,660,1140,0[1B084750_1..S02X013,847,5,0,1458412440,660,660,0[1B085550_1..S02X013,855,5,0,1458412920,660,900,0[1B086350_1..S02X013,863,5,0,1458413400,660,1140,0[1B086750_1..S02X013,867,5,0,1458413640,660,900,0[1B087150_1..S02X013,871,5,0,1458413880,660,660,0[1B087950_1..S02X013,879,5,0,1458414360,660,900,0[1B088750_1..S02X013,887,5,0,1458414840,660,1804,0[8A[1B[1B[1B[1B[1B[1B[1B[1B[3;22r[3;1H[10M[1;24r[12;1H089550_1..S02X013,895,5,0,1458415320,660,1324,0[1B089900_1..S02X013,899,5,0,1458415530,660,1114,0[1B090350_1..S02X013,903,5,1,1458415800,830,900,0[1B091150_1..S02X013,911,5,0,1458416280,660,420,1[1B091950_1..S02X013,919,5,0,1458416760,660,660,0[1B092750_1..S02X013,927,5,0,1458417240,660,900,0[1B093550_1..S02X013,935,5,0,1458417720,660,1140,0[1B094350_1..S02X013,943,5,0,1458418200,660,660,0[1B095150_1..S02X013,951,5,0,1458418680,660,900,0[1B095950_1..S02X013,959,5,0,1458419160,660,1140,0[9A[2B[1B[1B[1B[1B[1B[1B[1B[3;22r[3;1H[10M[1;24r[12;1H096750_1..S02X013,967,5,0,1458419640,660,660,0[1B100750_1..S02X013,1007,5,0,1458421999,660,788,0[1B101550_1..S02X013,1015,5,0,1458422611,660,523,1[1B102350_1..S02X013,1023,5,0,1458422900,660,889,0[1B103150_1..S02X013,1031,5,0,1458423480,660,1236,0[1B103950_1..S02X013,1039,5,0,1458423960,660,756,0[1B104750_1..S02X013,1047,5,0,1458424440,660,900,0[1B105550_1..S02X013,1055,5,0,1458424920,660,1110,0[1B106350_1..S02X013,1063,5,0,1458425400,660,630,1[1B107150_1..S02X013,1071,5,0,1458425880,660,870,0[9A[1B[1B[1B[1B[2B[1B[1B[1B[3;22r[3;1H[10M[1;24r[12;1H107950_1..S02X013,1079,5,0,1458426360,660,1110,0[1B108750_1..S02X013,1087,5,0,1458426840,660,630,1[1B109550_1..S02X013,1095,5,0,1458427320,660,870,0[1B110350_1..S02X013,1103,5,0,1458427800,660,1110,0[1B111150_1..S02X013,1111,5,0,1458428280,660,630,1[1B111950_1..S02X013,1119,5,0,1458428760,660,150,1[1B112750_1..S02X013,1127,5,0,1458429240,660,1110,0[1B113550_1..S02X013,1135,5,0,1458429720,660,630,1[1B114350_1..S02X013,1143,5,0,1458430200,660,870,0[1B115150_1..S02X013,1151,5,0,1458430680,660,1110,0[9A[2B[1B[1B[1B[2B[2B[3;22r[3;1H[10M[1;24r[12;1H115950_1..S02X013,1159,5,0,1458431160,660,630,1[1B116750_1..S02X013,1167,5,0,1458431640,660,870,0[1B117550_1..S02X013,1175,5,0,1458432120,660,1110,0[1B118350_1..S02X013,1183,5,0,1458432600,660,630,1[1B095400_1..S07R,954,0,0,1457986876,690,579,1[1B095650_1..S02R,956,0,0,1457986949,690,506,1[1B096100_1..S02R,961,0,0,1457987236,690,649,1[1B096650_1..S07R,966,0,0,1457987545,690,500,1[1B096900_1..S02R,969,0,0,1457987705,690,775,0[1B097300_1..S02R,973,0,0,1457987949,690,531,1[9A[1B[2A[4A[2;21r[2;1H[10L[1;24r[3;1H100750_1..S02X013,1007,5,0,1458421999,660,788,0[1B101550_1..S02X013,1015,5,0,1458422611,660,523,1[1B102350_1..S02X013,1023,5,0,1458422900,660,889,0[1B103150_1..S02X013,1031,5,0,1458423480,660,1236,0[1B103950_1..S02X013,1039,5,0,1458423960,660,756,0[1B104750_1..S02X013,1047,5,0,1458424440,660,900,0[1B105550_1..S02X013,1055,5,0,1458424920,660,1110,0[1B106350_1..S02X013,1063,5,0,1458425400,660,630,1[1B107150_1..S02X013,1071,5,0,1458425880,660,870,0[1B107950_1..S02X013,1079,5,0,1458426360,660,1110,0[9A0831[3;19H831,5,0,1458411480,660,900,0[K[1B0839[4;19H839,5,0,1458411960,660,1140,0[1B0847[5;19H847,5,0,1458412440,660,660,0[K[1B0855[6;19H855,5,0,1458412920,660,900,0[K[1B0863[7;19H863,5,0,1458413400,660,1140[1B086[8;19H867,5,0,14584136[1P[1B0871[9;19H871,5,0,1458413880,660,66[2P[1B0879[10;19H879,5,0,1458414360,660,900,0 [1B0887[11;19H887,5,0,1458414840,660,1804[1B0895[12;19H895,5,0,1458415320,660,1324,0[K[1B08990[13;19H899,5,0,1458415530,660,1114,0[1B0903[14;19H903,5,1,1458415800,830,90[1P[1B0911[15;19H911,5,0,1458416280,660,420,1  [1B0919[16;19H919,5,0,1458416760,660,660,0 [1B0927[17;19H927,5,0,1458417240,660,900,0 [1B0935[18;19H935,5,0,1458417720,660,114[1P[1B0943[19;19H943,5,0,1458418200,660,660,0 [1B0951[20;19H951,5,0,1458418680,660,90[1P[1B0959[21;19H959,5,0,1458419160,660,114[1P[15A[3A1090[3;14HR,1090,0,0,1457995020,690,72[2P[1B1095[4;14HR,1095,0,0,1457995320,690,90[3P[1B1100[5;14HR,1100,0,0,1457995620,690,600,1  [1B110[6;14HR,1105,0,0,1457995920,690,75[2P[1B1301[7;14HR,1301,2,0,1458094073,660,393,1   [1B1306[8;14HR,1306,2,0,1458094370,660,801,0[K[1B1314[9;14HR,1314,2,0,1458094829,660,1155,0[K[1B1324[10;14HR,1324,2,0,1458095460,660,524,1  [1B1334[11;14HR,1334,2,0,1458096060,660,534,1   [1B1344[12;14HR,1344,2,0,1458096660,660,690,0[K[1B13545[13;14HR,1354,2,0,1458097260,660,810,0[K[1B0006[14;17H8,6,2,0,1458102780,660,126[1P[1B0025[15;17H8,25,2,0,1458103920,660,1320,0[1B0045[16;17H8,45,2,0,1458105120,660,132[1B0599[17;19H599[17;31H398159,660,584,1[1B0607[18;19H607[18;31H398261,660,482,1 [1B0615[19;19H615[19;31H398508,660,1071,0[1B0623[20;19H623[20;31H399004,660,575,1[1B0631[21;19H631[21;31H39948	,642,1 [9A[9A0829[3;14HX021,829,6,0,1456686960,750,1020,0[1B0837[4;14HX021,837,6,0,1456687440,660,540,1[1B0845[5;14HX021,845,6,0,1456687920,660,780,0[1B0853[6;14HX021,853,6,0,1456688400,750,1020,0[1B086[7;14HX021,861,6,0,1456688880,660,540,1[1B0869[8;14HX021,869,6,0,1456689360,660,780,0[1B0877[9;14HX021,877,6,0,1456689840,750,1020,0[1B0885[10;14HX021,885,6,1,1456690320,974,540,1[1B0893[11;14HX021,893,6,0,1456690800,660,780,0[1B0901[12;14HX021,901,6,0,1456691280,750,1020,0[1B0909[13;14HX021,909,6,0,1456691760,660,540,1[1B0917[14;16H21,917,6,0,1456692240,660,780,0[1B09[15;16H21,925,6,0,1456692720,750,1020,0[1B0933[16;16H21,933,6,0,1456693200,660,540,1[1B0941[17;16H21,941,6[6C6693680,660,780,0[1B0949[18;16H21,949,6[6C6694160,750,1020,0[1B0957[19;16H21,957,6[6C6694640,660,540,1 [1B10300[20;14HR,1030,0,0,1457991433,690,50[2P[1B1035[21;13H7R,1035,0,0,1457991605,690,1078,0 [10A[2;21r[2;1H[10L[1;24r[3;1HtripId,starttime,day,level,time1at96,travelTimeLocal,travelTimeExpress,switch[1B074150_1..S02X021,741,6,0,1456681653,660,3165,0[1B074950_1..S02X021,749,6,0,1456682249,660,2569,0[1B075750_1..S02X021,757,6,0,1456682654,750,2164,0[1B076550_1..S02X021,765,6,0,1456683120,660,1698,0[1B078950_1..S02X021,789,6,0,1456684524,660,941,0[1B079750_1..S02X021,797,6,0,1456685117,660,915,0[1B080550_1..S02X021,805,6,0,1456685532,750,500,1[1B081350_1..S02X021,813,6,0,1456686000,660,887,0[1B082150_1..S02X021,821,6,0,1456686480,660,780,0[9A[20B[J[24;80H[24;1H[2J[?47l8[?1l>root@edison:~/IOT/IOT/Lab5/Lab5# exit
logout

Poky (Yocto Project Reference Distro) 1.7.2 edison ttyMFD2

edison login: 